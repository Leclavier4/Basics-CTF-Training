// Syst√®me de challenges - Donn√©es compl√®tes
const challenges = {
  web: {
    title: "üåê Web Security Challenge",
    description: `
            <strong>Type:</strong> S√©curit√© Web - XSS, CSRF, Directory Traversal<br><br>
            
            <strong>Description:</strong><br>
            Les vuln√©rabilit√©s web sont parmi les plus courantes dans les CTF. Elles incluent les injections (SQL, XSS), 
            les probl√®mes d'autorisation, et les failles de logique m√©tier.<br><br>
            
            <strong>Techniques principales:</strong><br>
            ‚Ä¢ Cross-Site Scripting (XSS): Injection de code JavaScript<br>
            ‚Ä¢ SQL Injection: Manipulation des requ√™tes base de donn√©es<br>
            ‚Ä¢ CSRF: Cross-Site Request Forgery<br>
            ‚Ä¢ Directory Traversal: Acc√®s non autoris√© aux fichiers<br>
            ‚Ä¢ Authentication Bypass: Contournement d'authentification
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>Burp Suite:</strong> Proxy d'interception et scanner<br>
            ‚Ä¢ <strong>OWASP ZAP:</strong> Scanner de vuln√©rabilit√©s web<br>
            ‚Ä¢ <strong>SQLmap:</strong> Outil d'injection SQL automatis√©<br>
            ‚Ä¢ <strong>Nikto:</strong> Scanner de serveur web<br>
            ‚Ä¢ <strong>Dirbuster/Gobuster:</strong> √ânum√©ration de r√©pertoires<br>
            ‚Ä¢ <strong>Browser DevTools:</strong> Inspection du code source
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Reconnaissance:
               - Examiner le code source
               - Identifier les points d'entr√©e
               - Tester les param√®tres GET/POST
            
            2. Exploitation:
               - Tester les payloads XSS: &lt;script&gt;alert('XSS')&lt;/script&gt;
               - Injection SQL: ' OR 1=1 --
               - Directory traversal: ../../../etc/passwd
            
            3. Validation:
               - Confirmer l'exploitation
               - R√©cup√©rer le flag
            </div>
        `,
    flag: "CTF{w3b_h4ck1ng_m4st3r_2024}",
  },
  crypto: {
    title: "üîê Cryptographie Challenge",
    description: `
            <strong>Type:</strong> Cryptanalyse et Chiffrement<br><br>
            
            <strong>Description:</strong><br>
            Les challenges de cryptographie impliquent souvent de casser des chiffrements faibles, 
            d'analyser des algorithmes cryptographiques ou de trouver des cl√©s.<br><br>
            
            <strong>Types de challenges:</strong><br>
            ‚Ä¢ Chiffrement C√©sar et substitution<br>
            ‚Ä¢ RSA avec cl√©s faibles<br>
            ‚Ä¢ Cryptanalyse fr√©quentielle<br>
            ‚Ä¢ Attaques sur les hash<br>
            ‚Ä¢ Chiffrement sym√©trique faible
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>CyberChef:</strong> Swiss Army knife pour la crypto<br>
            ‚Ä¢ <strong>John the Ripper:</strong> Casseur de mot de passe<br>
            ‚Ä¢ <strong>Hashcat:</strong> Craquage de hash avanc√©<br>
            ‚Ä¢ <strong>RsaCtfTool:</strong> Attaques RSA automatis√©es<br>
            ‚Ä¢ <strong>dCode:</strong> D√©codeur universel en ligne<br>
            ‚Ä¢ <strong>Python + cryptography:</strong> Scripts personnalis√©s
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Identification:
               - Analyser le type de chiffrement
               - Identifier les patterns
               - Calculer les statistiques
            
            2. Cryptanalyse:
               - C√©sar: Tester tous les d√©calages (0-25)
               - RSA: Factoriser n si petit
               - Hash: Recherche dans les bases (rainbow tables)
            
            3. Automatisation:
               - Utiliser des scripts pour tester multiple cl√©s
               - CyberChef pour les transformations rapides
            </div>
            
            <strong>Exemple de chiffrement C√©sar:</strong><br>
            <div class="code-block">FDHVDU ‚Üí CAESAR (d√©calage de 3)</div>
        `,
    flag: "CTF{crypt0_n1nj4_d3c0d3r_2024}",
  },
  forensics: {
    title: "üîç Forensics Challenge",
    description: `
            <strong>Type:</strong> Analyse m√©dico-l√©gale num√©rique<br><br>
            
            <strong>Description:</strong><br>
            Les challenges forensics consistent √† analyser des donn√©es, r√©cup√©rer des fichiers supprim√©s, 
            examiner la m√©moire, et extraire des informations cach√©es.<br><br>
            
            <strong>Domaines d'analyse:</strong><br>
            ‚Ä¢ Analyse de fichiers (m√©tadonn√©es, structure)<br>
            ‚Ä¢ R√©cup√©ration de donn√©es supprim√©es<br>
            ‚Ä¢ Analyse m√©moire (memory dumps)<br>
            ‚Ä¢ Analyse r√©seau (captures pcap)<br>
            ‚Ä¢ Analyse de logs syst√®me
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>Autopsy:</strong> Plateforme d'analyse forensics<br>
            ‚Ä¢ <strong>Volatility:</strong> Analyse de m√©moire<br>
            ‚Ä¢ <strong>Wireshark:</strong> Analyse de trafic r√©seau<br>
            ‚Ä¢ <strong>Binwalk:</strong> Analyse de firmware<br>
            ‚Ä¢ <strong>ExifTool:</strong> M√©tadonn√©es de fichiers<br>
            ‚Ä¢ <strong>Foremost:</strong> R√©cup√©ration de fichiers<br>
            ‚Ä¢ <strong>Strings:</strong> Extraction de cha√Ænes
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Premi√®re inspection:
               file suspicious_file.bin
               strings suspicious_file.bin | grep -i flag
               exiftool image.jpg
            
            2. Analyse approfondie:
               binwalk -e firmware.bin
               volatility -f memory.dump imageinfo
               wireshark capture.pcap
            
            3. R√©cup√©ration:
               foremost -t all -i disk.img
               photorec disk.img
            </div>
            
            <strong>Astuce:</strong> Toujours v√©rifier les m√©tadonn√©es et les donn√©es cach√©es!
        `,
    flag: "CTF{f0r3ns1cs_d3t3ct1v3_2024}",
  },
  reverse: {
    title: "‚öôÔ∏è Reverse Engineering",
    description: `
            <strong>Type:</strong> R√©tro-ing√©nierie de programmes<br><br>
            
            <strong>Description:</strong><br>
            Le reverse engineering consiste √† analyser des binaires pour comprendre leur fonctionnement, 
            contourner des protections ou extraire des secrets.<br><br>
            
            <strong>Techniques principales:</strong><br>
            ‚Ä¢ Analyse statique (d√©sassemblage)<br>
            ‚Ä¢ Analyse dynamique (debugging)<br>
            ‚Ä¢ D√©obfuscation de code<br>
            ‚Ä¢ Contournement d'anti-debug<br>
            ‚Ä¢ Extraction d'algorithmes
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>Ghidra:</strong> D√©sassembleur NSA (gratuit)<br>
            ‚Ä¢ <strong>IDA Pro:</strong> D√©sassembleur professionnel<br>
            ‚Ä¢ <strong>Radare2:</strong> Framework de reverse<br>
            ‚Ä¢ <strong>GDB:</strong> Debugger GNU<br>
            ‚Ä¢ <strong>x64dbg:</strong> Debugger Windows<br>
            ‚Ä¢ <strong>Ollydbg:</strong> Debugger classique<br>
            ‚Ä¢ <strong>Cutter:</strong> Interface GUI pour Radare2
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Analyse statique:
               file binary
               strings binary | grep -i flag
               objdump -d binary
            
            2. Analyse avec Ghidra:
               - Charger le binaire
               - Analyser automatiquement
               - Examiner la fonction main
               - Chercher les comparaisons
            
            3. Debugging dynamique:
               gdb binary
               break main
               run
               disas
               ni (next instruction)
            </div>
        `,
    flag: "CTF{r3v3rs3_3ng1n33r_pr0_2024}",
  },
  pwn: {
    title: "üí• Binary Exploitation (Pwn)",
    description: `
            <strong>Type:</strong> Exploitation de binaires<br><br>
            
            <strong>Description:</strong><br>
            Les challenges pwn impliquent l'exploitation de vuln√©rabilit√©s dans des programmes 
            pour obtenir un shell ou ex√©cuter du code arbitraire.<br><br>
            
            <strong>Vuln√©rabilit√©s communes:</strong><br>
            ‚Ä¢ Buffer Overflow<br>
            ‚Ä¢ Format String bugs<br>
            ‚Ä¢ Use-after-free<br>
            ‚Ä¢ Integer overflow<br>
            ‚Ä¢ ROP (Return Oriented Programming)
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>GDB + PEDA:</strong> Debugger am√©lior√©<br>
            ‚Ä¢ <strong>Pwntools:</strong> Framework d'exploitation Python<br>
            ‚Ä¢ <strong>ROPgadget:</strong> Recherche de gadgets ROP<br>
            ‚Ä¢ <strong>Checksec:</strong> V√©rification des protections<br>
            ‚Ä¢ <strong>Radare2:</strong> Analyse et exploitation<br>
            ‚Ä¢ <strong>One_gadget:</strong> Gadgets pour libc
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Reconnaissance:
               checksec binary
               file binary
               ldd binary (voir les biblioth√®ques)
            
            2. Analyse des vuln√©rabilit√©s:
               # Buffer overflow simple
               python -c "print('A' * 100)" | ./binary
               
            3. Exploitation avec pwntools:
               from pwn import *
               p = process('./binary')
               payload = b'A' * 72 + p64(0xdeadbeef)
               p.sendline(payload)
            </div>
        `,
    flag: "CTF{pwn_m4st3r_sh3ll_h4ck3r_2024}",
  },
  steganography: {
    title: "üñºÔ∏è St√©ganographie",
    description: `
            <strong>Type:</strong> Donn√©es cach√©es dans des m√©dias<br><br>
            
            <strong>Description:</strong><br>
            La st√©ganographie consiste √† cacher des informations dans des images, sons, 
            ou autres fichiers m√©dias sans alt√©rer leur apparence.<br><br>
            
            <strong>Techniques courantes:</strong><br>
            ‚Ä¢ LSB (Least Significant Bit)<br>
            ‚Ä¢ Donn√©es dans les m√©tadonn√©es<br>
            ‚Ä¢ Canaux de couleur modifi√©s<br>
            ‚Ä¢ St√©ganographie audio<br>
            ‚Ä¢ Fichiers cach√©s dans des archives
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>Steghide:</strong> Cacheur/extracteur universel<br>
            ‚Ä¢ <strong>StegSolve:</strong> Analyseur d'images Java<br>
            ‚Ä¢ <strong>Zsteg:</strong> D√©tection st√©gano dans PNG/BMP<br>
            ‚Ä¢ <strong>Binwalk:</strong> Recherche de fichiers cach√©s<br>
            ‚Ä¢ <strong>ExifTool:</strong> M√©tadonn√©es<br>
            ‚Ä¢ <strong>Audacity:</strong> Analyse audio<br>
            ‚Ä¢ <strong>GIMP:</strong> Manipulation d'images
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Analyse basique:
               file image.png
               exiftool image.png
               strings image.png | grep -i flag
            
            2. Recherche de fichiers cach√©s:
               binwalk image.png
               foremost image.png
            
            3. St√©ganographie LSB:
               zsteg image.png
               steghide extract -sf image.jpg
               
            4. Analyse avec StegSolve:
               - Charger l'image
               - Parcourir les plans de couleur
               - Rechercher des patterns
            </div>
        `,
    flag: "CTF{st3g4n0_h1dd3n_m3ss4g3_2024}",
  },
  osint: {
    title: "üïµÔ∏è OSINT (Open Source Intelligence)",
    description: `
            <strong>Type:</strong> Recherche d'informations publiques<br><br>
            
            <strong>Description:</strong><br>
            L'OSINT consiste √† collecter et analyser des informations disponibles publiquement 
            pour r√©soudre des enqu√™tes ou trouver des indices.<br><br>
            
            <strong>Sources d'information:</strong><br>
            ‚Ä¢ R√©seaux sociaux<br>
            ‚Ä¢ M√©tadonn√©es d'images<br>
            ‚Ä¢ Bases de donn√©es publiques<br>
            ‚Ä¢ Archives web<br>
            ‚Ä¢ G√©olocalisation
        `,
    tools: `
            <strong>üõ†Ô∏è Outils recommand√©s:</strong><br>
            ‚Ä¢ <strong>Maltego:</strong> Plateforme d'analyse de liens<br>
            ‚Ä¢ <strong>Shodan:</strong> Moteur de recherche IoT<br>
            ‚Ä¢ <strong>Google Dorking:</strong> Recherches avanc√©es<br>
            ‚Ä¢ <strong>Wayback Machine:</strong> Archives web<br>
            ‚Ä¢ <strong>TinEye:</strong> Recherche d'images invers√©e<br>
            ‚Ä¢ <strong>Recon-ng:</strong> Framework de reconnaissance<br>
            ‚Ä¢ <strong>SpiderFoot:</strong> Automatisation OSINT
        `,
    solution: `
            <strong>üéØ Approche de r√©solution:</strong><br><br>
            
            <div class="code-block">
            1. Collecte d'informations:
               - Google dorking: site:target.com filetype:pdf
               - Recherche sur les r√©seaux sociaux
               - V√©rification des m√©tadonn√©es
            
            2. G√©olocalisation:
               - Analyser les coordonn√©es GPS
               - Utiliser Google Street View
               - Rechercher des indices visuels
            
            3. Analyse temporelle:
               - Wayback Machine pour l'historique
               - Croiser les dates et √©v√©nements
               - Timeline des activit√©s
            </div>
            
            <strong>Exemple de Google Dork:</strong><br>
            <div class="code-block">site:pastebin.com "password" "email"</div>
        `,
    flag: "CTF{0s1nt_1nv3st1g4t0r_m4st3r_2024}",
  },
};
